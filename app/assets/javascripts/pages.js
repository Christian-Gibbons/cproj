$(document).ready(function(){
  $('span').hover(function(){
    $('span').css('cursor','pointer');
  })
  $('#p1').click(function(){ 
    $('.link').removeClass('selected');
    $('#p1').addClass('selected');
    $('#youtube').html('<iframe class=link id=y1 width="560" height="315" src="//www.youtube.com/embed/nhqRLap_4WM?list=PLvqIVBTCo849kgCyR8zemiXRb8CfdfAbw" frameborder="0" allowfullscreen></iframe>');
  });
  $('#p2').click(function(){  
    $('.link').removeClass('selected');
    $('#p2').addClass('selected');
    $('#youtube').html('<iframe class=link id=y2 width="560" height="315" src="//www.youtube.com/embed/h1Lod6cMFxQ" frameborder="0" allowfullscreen></iframe>');   
  });
  $('#p3').click(function(){
    $('.link').removeClass('selected');
    $('#p3').addClass('selected');
    $('#youtube').html('<iframe class=link id=y3 width="560" height="315" src="//www.youtube.com/embed/lQXAJN5cMKA" frameborder="0" allowfullscreen></iframe>');    
  });
  $('#p4').click(function(){
    $('.link').removeClass('selected');
    $('#p4').addClass('selected');
    $('#youtube').html('<iframe class=link id=y4 width="560" height="315" src="//www.youtube.com/embed/Uv4L4l66KSc" frameborder="0" allowfullscreen></iframe>');
  });
  $('#p5').click(function(){
    $('.link').removeClass('selected');
    $('#p5').addClass('selected');
    $('#youtube').html('<iframe class=link id=y5 width="420" height="315" src="//www.youtube.com/embed/_FCQ29Vmt1k" frameborder="0" allowfullscreen></iframe>');
  });
  $('#p6').click(function(){
    $('.link').removeClass('selected');
    $('#p6').addClass('selected');
    $('#youtube').html('<iframe class=link id=y6 width="560" height="315" src="//www.youtube.com/embed/_mF5lkQzP-U" frameborder="0" allowfullscreen></iframe>');
  });
  $('#p7').click(function(){
    $('.link').removeClass('selected');
    $('#p7').addClass('selected');
    $('#youtube').html('<iframe class=link id=y7 width="560" height="315" src="//www.youtube.com/embed/OC6003MjYR8" frameborder="0" allowfullscreen></iframe>');
  });
  $('#p8').click(function(){
    $('.link').removeClass('selected');
    $('#p8').addClass('selected');
    $('#youtube').html('<iframe class=link id=y8 width="420" height="315" src="//www.youtube.com/embed/yzE0b2JnTo0" frameborder="0" allowfullscreen></iframe>');
  });
  $('#p9').click(function(){
    $('.link').removeClass('selected');
    $('#p9').addClass('selected');
    $('#youtube').html('<iframe class=link id=y9 width="560" height="315" src="//www.youtube.com/embed/HKiCIN4nW_c" frameborder="0" allowfullscreen></iframe>');
  });
  $('#p10').click(function(){  
    $('.link').removeClass('selected');
    $('#p10').addClass('selected');
    $('#youtube').html('<iframe class=link id=y10 width="420" height="315" src="//www.youtube.com/embed/ajcVPo01ozA" frameborder="0" allowfullscreen></iframe><div style="height:300px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>Project Goal: To interface the Hubo robot with an android smartphone.<br><br>Low Level control: To control the joints, there we created a function that takes in an array that contains joint IDs and positions to set them at, and the number of steps to interpolate the movement in order to allow us to move the joints fluidly and concurrently.<br><br>High Level Control: Balance is kept through static stability, keeping the center of mass over the support polygon of the robot.  The walking algorithm was designed by carefully looking at a human\'s walking pattern and identify keyframes that can be used in a statically stable manner.  This algorithm consists of shifting weight over one foot and lifting up the other foot and extending it forward.  The foot bearing weight then bends down to put the other foot on the ground, and then the body leans forward and centers the hips to put weight back on both feet.  Then the back leg straightens while the front leg bends at the knee shifting the center of mass towards the front.  The hips then move into position over the front foot which then straightens allowing the back leg to swing forward and set back down on the ground.<br><br>Android control: The Android phone interfaces with the robot with UDP packets sent over wifi.  The packet is received selects a function to run that will move the Hubo robot.<br><br>To run project: Start up the hubo simulator:<br>$ hubo-ach sim openhubo physics<br><br>Then start the server:<br>$ ./hubo-walk<br><br>Finally, run the android app "test.apk".<br><br>One thing we would have done differently if we had more time in the integration process was was separate the UDP server from the controller into separate processes so that the server did not have to wait on the walking algorithm to complete in order to send or receive packets, which would allow the transmission of sensor data to the android in real-time.r</p></div>');   
  });
  $('#g1').click(function(){
    $('.link').removeClass('selected');
    $('#g1').addClass('selected');
    $('#youtube').html('<p>Click picture to play</p><a href="http://taroomiya.com/games/susies-summer-home/webplayer/" target="_blank"><img src="/assets/susie.png"></a><div style="height:250px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>This game was developed for the 2012 Global Game Jam.  We had 72 hours to complete the entire design process.  The game was built on the Unity engine which makes use of C#, a programming language I had, to that point, no experience with, but I jumped in and started contributing code to the project on day 1.  Developing this game was a great opportunity to pick up experience working as part of a team.</p></div>');
  })
  $('#g2').click(function(){ 
    $('.link').removeClass('selected');
    $('#g2').addClass('selected');
    $('#youtube').html('<p>Click picture to play</p><a href="http://christian-gibbons.github.io/digital-template/" target="_blank"><img src="/assets/dog_catcher.png"></a><div style="height:250px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>This is the first game I made in the Phaser game engine as well as my first real experience in Javascript.  My primary focus with this game was familiarize myself with the capabilities of the engine and with the Javascript language.</p></div>');
  });
  $('#g3').click(function(){ 
    $('.link').removeClass('selected');
    $('#g3').addClass('selected');
    $('#youtube').html('<p>Click picture to play</p><a href="http://christian-gibbons.github.io/box-o-kittens/" target="_blank"><img src="/assets/cat_lady.png" alt="click to play"></a><div style="height:250px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>I had started this game with the intention of making an action game, however while I was play-testing the throwing mechanic of the game, I found that just trying to hit a target was pretty entertaining by itself, so I turned it into a shooting gallery of sorts.  The random placement of the targets along a timer encouraging you to complete the game in as little time as you can brings some replayability to the game.  I made use of Tiled--a tilemap editor--for the first time to design the background and create a collision layer.</p></div>');
  });
  $('#g4').click(function(){ 
    $('.link').removeClass('selected');
    $('#g4').addClass('selected');
    $('#youtube').html('<p>Click picture to play</p><a href="http://christian-gibbons.github.io/reluctant-protagonist/" target="_blank"><img src="/assets/reluctant_protagonist.png"></a><div style="height:175px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>For this game, I was experimenting with the concept of having character that the game centers around controlled indirectly by the player.  I wanted so create a game where the character was manipulated into doing something in its effort to avoid the player-controlled character.  To try to bring in replayability, I made the balls choose their spawn-point, speed, and direction randomly, which also adds to the difficulty as the player will quickly decide where to manipulate the NPC to as well as where to move their own character to be set up their next move.</p><p>I further built upon my knowledge of Tiled in learning to make use of its terrain feature as well learning how to place objects in the object layer that my game can make use of.</div>');
  });
  $('#g5').click(function(){
    $('.link').removeClass('selected');
    $('#g5').addClass('selected');
    $('#youtube').html('<p>Click picture to play</p><a href="http://christian-gibbons.github.io/platformer-V2/" target="_blank"><img src="/assets/platformer.png"></a><div style="height:300px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>Before working on this game, I had done some experimenting in Tiled learning to make use of its automapping feature.  I used this to automatically generate a collision layer by creating a set of rules based on the tiles placed in the background.  I also wanted to experiment with a more advanced collision scheme that added directional collision allowing the player, for certain tiles, to be able to jump through a tile from underneath and land on top of it.  I also used game states for the first time in this game allowing me to add multiple stages to the game.  For gameplay, I added in a variable jump height mechanic and spent some time tuning it so that it doesn\'t get a floaty feeling and the player feels like they have strong control of their jumping since it is an important aspect to platformers.</p></div>');
  });
  $('#g6').click(function(){
    $('.link').removeClass('selected');
    $('#g6').addClass('selected');
    $('#youtube').html('<p>Click picture to play</p><a href="http://christian-gibbons.github.io/crazy-cat-lady-V2/" target="_blank"><img src="/assets/cat_lady_2.png"></a><div style="height:250px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>My original vision as I was creating the first Crazy Cat Lady was a more action-oriented game, and I decided to revisit the game and bring back that original vision.  It is only a short one-level proof-of-concept, but I am pleased with how the enemy AI turned out that kicked up the difficulty but was fair.  I wanted to come up with a more advanced movement algorithm for the boss, but I had run out of time when I had gotten to that part.  The difficulty is still there with the spread-shot that it fires as well as its ability to resurrect other aliens to help it adding in supporting fire from another direction.</p></div>');
  });
  $('#m2').click(function(){
    $('.link').removeClass('selected');
    $('#m2').addClass('selected');
    $('#youtube').html('<iframe width="560" height="315" src="https://www.youtube.com/embed/d83I6kwt27M" frameborder="0" allowfullscreen></iframe>');
  });
  $('#m3').click(function(){
    $('.link').removeClass('selected');
    $('#m3').addClass('selected');
    $('#youtube').html('<iframe width="560" height="315" src="https://www.youtube.com/embed/5lXmQ04Dw4M" frameborder="0" allowfullscreen></iframe>');
  });
  $('#m4').click(function(){
    $('.link').removeClass('selected');
    $('#m4').addClass('selected');
    $('#youtube').html('<iframe width="560" height="315" src="https://www.youtube.com/embed/gkbI7YhZw30" frameborder="0" allowfullscreen></iframe><div style="height:300px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>This is a task scheduler I wrote for the MSP430 and a program I wrote to show the scheduler at work.  For the priority queue, I wrote my own heap data structure.  Heaps are not traditionally a "searchable" data structure, but I designed my heap on top of an array that could be searched through to avoid attempting to add a task that is already scheduled for execution.</p><p>I wanted my scheduler to be moduler so that it could included as a library in a project that needed scheduling rather than hard-coding the scheduler into each program.  In order to accomplish this, the scheduler makes use of an array of function pointers so that the tasks to be scheduled can be passed into this array without touching the code for the scheduler.</p><p>The program I wrote to test the functionality of my scheduler is comprised of three tasks and a low-power idle state.  The task with the highest priority draws a sprite onto the OLED display; this task is repeatedly scheduled by a timer.  The next highest priority task is a count-down.  It counts down from 9 to 0 before it finishes.  The lowest priority task is to turn the sprite around and make it move across the screen in the opposite direction.  Those two tasks are schedule by the press of a button.  These three tasks together show the concurrency, priority, and pre-emption of the scheduler.  When the button is pressed scheduling the countdown and the turn-around, the sprite continues to move across the screen while the timer countdown occurs as it is a higher priority and comes in to execute when needed.  The sprite does not turn around until the countdown has finished even though it is scheduled at the same time as the countdown because the countdown has a higher priority preventing the turn-around from occuring until it finishes and is removed from the schedule queue.</p></div>');
  });
  $('#f1').click(function(){
    $('.link').removeClass('selected');
    $('#f1').addClass('selected');
    $('#youtube').html('<iframe width="560" height="315" src="https://www.youtube.com/embed/89exmi1MgUg" frameborder="0" allowfullscreen></iframe><div style="height:300px;border:1px solid #ccc;font:16px/26px Georgia, Garamond, Serif;overflow:auto;"><p>This is a dumbed down Pacman clone I wrote for the Xilinx Spartan-6 FPGA running on the Nexys3 board.  Programmed in VHDL.</p></div>');
  });
  $('#p1').mouseenter(function(){
    $('#p1').addClass('hover');
  });
  $('#p1').mouseout(function(){
    $('#p1').removeClass('hover');
  });
  $('#p2').mouseenter(function(){
    $('#p2').addClass('hover')
  });
  $('#p2').mouseout(function(){
    $('#p2').removeClass('hover');
  });
  $('#p3').mouseenter(function(){
    $('#p3').addClass('hover')
  });
  $('#p3').mouseout(function(){
    $('#p3').removeClass('hover');
  });
  $('#p4').mouseenter(function(){
    $('#p4').addClass('hover')
  });
  $('#p4').mouseout(function(){
    $('#p4').removeClass('hover');
  });
  $('#p5').mouseenter(function(){
    $('#p5').addClass('hover')
  });
  $('#p5').mouseout(function(){
    $('#p5').removeClass('hover');
  });
  $('#p6').mouseenter(function(){
    $('#p6').addClass('hover')
  });
  $('#p6').mouseout(function(){
    $('#p6').removeClass('hover');
  });
  $('#p7').mouseenter(function(){
    $('#p7').addClass('hover')
  });
  $('#p7').mouseout(function(){
    $('#p7').removeClass('hover');
  });
  $('#p8').mouseenter(function(){
    $('#p8').addClass('hover')
  });
  $('#p8').mouseout(function(){
    $('#p8').removeClass('hover');
  });
  $('#p9').mouseenter(function(){
    $('#p9').addClass('hover')
  });
  $('#p9').mouseout(function(){
    $('#p9').removeClass('hover');
  });
  $('#p10').mouseenter(function(){
    $('#p10').addClass('hover');
  });
  $('#p10').mouseout(function(){
    $('#p10').removeClass('hover');
  });
  $('#g1').mouseenter(function(){
    $('#g1').addClass('hover');
  });
  $('#g1').mouseout(function(){
    $('#g1').removeClass('hover');
  });
  $('#g2').mouseenter(function(){
    $('#g2').addClass('hover');
  });
  $('#g2').mouseout(function(){
    $('#g2').removeClass('hover');
  });
  $('#g3').mouseenter(function(){
    $('#g3').addClass('hover');
  });
  $('#g3').mouseout(function(){
    $('#g3').removeClass('hover');
  });
  $('#g4').mouseenter(function(){
    $('#g4').addClass('hover');
  });
  $('#g4').mouseout(function(){
    $('#g4').removeClass('hover');
  });
  $('#g5').mouseenter(function(){
    $('#g5').addClass('hover');
  });
  $('#g5').mouseout(function(){
    $('#g5').removeClass('hover');
  });
  $('#g6').mouseenter(function(){
    $('#g6').addClass('hover');
  });
  $('#g6').mouseout(function(){
    $('#g6').removeClass('hover');
  });
  $('#m2').mouseenter(function(){
    $('#m2').addClass('hover');
  });
  $('#m2').mouseout(function(){
    $('#m2').removeClass('hover');
  });
  $('#m3').mouseenter(function(){
    $('#m3').addClass('hover');
  });
  $('#m3').mouseout(function(){
    $('#m3').removeClass('hover');
  });
  $('#m4').mouseenter(function(){
    $('#m4').addClass('hover');
  });
  $('#m4').mouseout(function(){
    $('#m4').removeClass('hover')
  });
  $('#f1').mouseenter(function(){
    $('#f1').addClass('hover');
  });
  $('#f1').mouseout(function(){
    $('#f1').removeClass('hover');
  });
});